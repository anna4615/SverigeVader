@inject DAL.IDataAccess DataAccess;
@using System.Collections.Generic;

@code {

    [Parameter]
    public string SelectedCity { get; set; }

    [Parameter]
    public IEnumerable<Models.Measurement> Measurements { get; set; }
}

<tbody style="color: #415A6D">

    <tr>
        <th scope="row">@SelectedCity</th>
        <td>
            Medel
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.Temperature != null)
        .Average(m => m.Record.Temperature), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.WindSpeed != null)
        .Average(m => m.Record.WindSpeed), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.Clouds != null)
        .Average(m => m.Record.Clouds))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.RelativeHumidity != null)
        .Average(m => m.Record.Clouds))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.UvIndex != null)
        .Average(m => m.Record.Clouds), 1)
        </td>
    </tr>

    <tr>
        <th scope="row"></th>
        <td>
            Max
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.Temperature != null)
        .Max(m => m.Record.Temperature), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.WindSpeed != null)
        .Max(m => m.Record.WindSpeed), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.Clouds != null)
        .Max(m => m.Record.Clouds))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.RelativeHumidity != null)
        .Max(m => m.Record.Clouds))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.UvIndex != null)
        .Max(m => m.Record.Clouds), 1)
        </td>
    </tr>

    <tr>
        <th scope="row"></th>
        <td>
            Min
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.Temperature != null)
        .Min(m => m.Record.Temperature), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.WindSpeed != null)
        .Min(m => m.Record.WindSpeed), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.Clouds != null)
        .Min(m => m.Record.Clouds))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.RelativeHumidity != null)
        .Min(m => m.Record.Clouds))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == SelectedCity && m.Record.UvIndex != null)
        .Min(m => m.Record.Clouds), 1)
        </td>
    </tr>





    <tr>
        <th></th>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>

</tbody>