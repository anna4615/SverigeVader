@inject DAL.IDataAccess DataAccess;
@using System.Collections.Generic;

@code {

    [Parameter]
    public List<string> Cities { get; set; }

    [Parameter]
    public IEnumerable<Models.Measurement> Measurements { get; set; }

    TimeZoneInfo ectZone = TimeZoneInfo.FindSystemTimeZoneById("Central Europe Standard Time");
}





<tbody style="color: #415A6D">

    @foreach (var city in Cities)
    {
    <tr>
        <th scope="row">
            @city
            
        </th>
        <td style="font-size: small">
            @TimeZoneInfo.ConvertTimeFromUtc(Measurements.Where(m => m.City == city).Min(m => m.Date), ectZone).ToString("yyyy-MM-dd") -
            @TimeZoneInfo.ConvertTimeFromUtc(Measurements.Where(m => m.City == city).Max(m => m.Date), ectZone).ToString("yyyy-MM-dd")
            @*@(Measurements.Where(m => m.City == city).Min(m => m.Date.ToString("yyyy-MM-dd"))) -
            @(Measurements.Where(m => m.City == city).Max(m => m.Date.ToString("yyyy-MM-dd")))*@
        </td>
        <td>
            Medel
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.Temperature != null)
        .Average(m => m.Record.Temperature), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.WindSpeed != null)
        .Average(m => m.Record.WindSpeed), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.Clouds != null)
        .Average(m => m.Record.Clouds))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.RelativeHumidity != null)
        .Average(m => m.Record.RelativeHumidity))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.UvIndex != null)
        .Average(m => m.Record.UvIndex), 1)
        </td>
    </tr>

    <tr>
        <th scope="row"></th>
        <td style="font-size: small"></td>
        <td>
            Max
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.Temperature != null)
        .Max(m => m.Record.Temperature), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.WindSpeed != null)
        .Max(m => m.Record.WindSpeed), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.Clouds != null)
        .Max(m => m.Record.Clouds))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.RelativeHumidity != null)
        .Max(m => m.Record.RelativeHumidity))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.UvIndex != null)
        .Max(m => m.Record.UvIndex), 1)
        </td>
    </tr>

    <tr>
        <th scope="row"></th>
        <td style="font-size: small"></td>
        <td>
            Min
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.Temperature != null)
        .Min(m => m.Record.Temperature), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.WindSpeed != null)
        .Min(m => m.Record.WindSpeed), 1)
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.Clouds != null)
        .Min(m => m.Record.Clouds))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.RelativeHumidity != null)
        .Min(m => m.Record.RelativeHumidity))
        </td>
        <td>
            @Math.Round((double)Measurements
        .Where(m => m.City == city && m.Record.UvIndex != null)
        .Min(m => m.Record.UvIndex), 1)
        </td>
    </tr>
    }

    <tr>
        <th></th>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>

</tbody>